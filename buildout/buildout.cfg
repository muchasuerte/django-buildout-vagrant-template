[buildout]
extends = versions.cfg

# All packages are downloaded locally.
download-cache = downloads

bin-directory = ${buildout:directory}/../bin
# All eggs are installed here
eggs-directory = eggs

# You need this if there is an "extends = http://..."
extends-cache = ext-cache
relative-paths = false
show-picked-versions= true

parts = mkdir

# Gunicorn build and configure        
        libevent
        gevent
        gunicorn-conf
        project_runner

# Postgres build and configure
        postgres
        postgres-init
        postgres-conf
        psycopg2

# Nginx build and configure
        nginx
        nginx-conf
        nginx-mime

# Django configure
        django-admin
        django-init
        django-manage

# Process control
        supervisor


eggs = gevent
       pytz
       pycrypto

       werkzeug
       setproctitle

       Django
       django-dajaxice
       django-extensions
       django-pipeline

       psycopg2
       South

versions = versions
newest = false

[service-paths]
webpannel-data = /opt/vagrant-data
#webpannel-data = ${buildout:directory}
django-dir = ${buildout:directory}/../src
postgres-db = ${service-paths:webpannel-data}/postgres
logs-dir = ${service-paths:webpannel-data}/logs
etc-dir = ${service-paths:webpannel-data}/etc
run-dir = ${service-paths:webpannel-data}/run

[mkdir]
recipe = z3c.recipe.mkdir
mode = 0700
paths =
    ${service-paths:django-dir}/static
    ${service-paths:postgres-db}
    ${service-paths:etc-dir}
    ${service-paths:logs-dir}
    ${service-paths:run-dir}

[django]
project = project
settings = settings
location = ${service-paths:django-dir}
static_root = ${service-paths:django-dir}/static
control-script = manage.py

[django-admin]
recipe = zc.recipe.egg:scripts
eggs = ${buildout:eggs}
entry-points = admin=django.core.management:execute_from_command_line
arguments = sys.argv
scripts= admin=django-admin.py
extra-paths = ${django:location}

[django-manage]
recipe = zc.recipe.egg:scripts
eggs = ${buildout:eggs}
entry-points = manage=django.core.management:execute_from_command_line
initialization = import os
                os.environ.setdefault("DJANGO_SETTINGS_MODULE", "${django:project}.${django:settings}")
arguments = sys.argv
scripts= manage=${django:control-script}
extra-paths = ${django:location}

[django-init]
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds=
    if [ ! -e ${django:location}/${django:project} ]; then
        ${buildout:bin-directory}/django-admin.py startproject ${django:project} ${django:location}
        rm -rf ${django:location}/manage.py
        echo "startproject: ${django:project}"
        echo "path: ${django:location}"
    fi

[django-email]
user = demo
password = demo
host = smtp.gmail.com
port = 587
use_tls = True

[django-db]
engine = postgresql_psycopg2 # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
name = ${django:project}_db
user = ${django:project}
password = ${django:project}
host = 127.0.0.1
port = 5432

##############################################################################
# 3. nginx and gunicorn
##############################################################################
[nginx]
recipe = zc.recipe.cmmi
url = http://nginx.org/download/nginx-1.2.7.tar.gz
patch = ${buildout:directory}/patches/nginx-1.2.7-no_buffer-v6.patch
patch_options = -p1
extra_options =
    --conf-path=${service-paths:etc-dir}/nginx/nginx.conf
    --error-log-path=${service-paths:logs-dir}/nginx-error.log
    --http-log-path=${service-paths:logs-dir}/nginx-access.log
    --pid-path=${service-paths:run-dir}/run/nginx.pid
    --lock-path=${service-paths:run-dir}/nginx.lock
    --with-http_ssl_module
    --without-http_rewrite_module

[nginx-conf]
recipe = collective.recipe.template
input = templates/nginx/nginx.conf.template
output = ${service-paths:etc-dir}/nginx/nginx.conf
port = 8080
sslport = 9090

[nginx-mime]
recipe = collective.recipe.template
input = templates/nginx/mime.types.default
output = ${service-paths:etc-dir}/nginx/mime.types

[gunicorn]
recipe = zc.recipe.egg
eggs =
  gunicorn
  ${buildout:eggs}
extra-paths =
  ${django:location}

socket-path = ${service-paths:run-dir}/gunicorn.sock
workers = 1

[gunicorn-conf]
recipe = collective.recipe.template
input = templates/gunicorn/gunicorn.conf.py
output = ${service-paths:etc-dir}/gunicorn/gunicorn.conf.py

[project_runner]
recipe = collective.recipe.template
input = templates/project_runner.py
output = ${django:location}/project_runner.py

[libevent]
recipe = zc.recipe.cmmi
url = https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz

[gevent]
recipe = zc.recipe.egg:custom
include-dirs = ${libevent:location}/include
library-dirs = ${libevent:location}/lib
rpath = ${:library-dirs}

[postgres]
recipe = zc.recipe.cmmi
url = http://ftp.postgresql.org/pub/source/v9.1.9/postgresql-9.1.9.tar.gz
extra_options = --without-readline

[postgres-init]
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds =
    if [ ! -e ${service-paths:postgres-db}/postgresql.conf ]; then
        # hostname:port:database:username:password
        echo "127.0.0.1:${django-db:port}:${django-db:name}:${django-db:user}:${django-db:password}" > /tmp/postgres.password
        ${postgres:location}/bin/initdb --encoding=UTF8 --no-locale ${service-paths:postgres-db} --username=${django-db:user} --pwfile /tmp/postgres.password
        ${postgres:location}/bin/pg_ctl -D ${service-paths:postgres-db} start -w
        ${postgres:location}/bin/psql --dbname postgres -c "CREATE USER ${django-db:user} WITH PASSWORD '${django-db:password}' SUPERUSER;"
        ${postgres:location}/bin/createdb --username=${django-db:user} --owner=${django-db:user} --no-password --template=template0 --encoding=UTF8 ${django-db:name}
        ${postgres:location}/bin/pg_ctl -D ${service-paths:postgres-db} stop -w
        rm /tmp/postgres.password
    fi

[postgres-conf]
recipe = collective.recipe.template
input = templates/postgres/postgresql.conf
output = ${service-paths:postgres-db}/postgresql.conf

[supervisor]
recipe = collective.recipe.supervisor
port = 9080
user = admin
password = admin
supervisord-conf = ${service-paths:etc-dir}/supervisord/supervisord.conf
childlogdir = ${service-paths:logs-dir}
pidfile = ${service-paths:run-dir}/supervisord.pid
logfile = ${service-paths:logs-dir}/supervisord.log
nodaemon = false
serverurl = http://localhost:${supervisor:port}
plugins = superlance

[psycopg2]
recipe = zc.recipe.egg:custom
environment = psycopg2-env
rpath = ${postgres:location}/lib

# This is needed to help psycopg2 find the pg_config script
[psycopg2-env]
PATH=${postgres:location}/bin:%(PATH)s

